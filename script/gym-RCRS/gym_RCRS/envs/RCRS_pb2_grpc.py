# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from gym_RCRS.envs import RCRS_pb2 as RCRS__pb2


class SimpleConnectionStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetActionType = channel.unary_unary(
                '/simpleRCRS.SimpleConnection/SetActionType',
                request_serializer=RCRS__pb2.AgentProto.SerializeToString,
                response_deserializer=RCRS__pb2.ActionType.FromString,
                )
        self.SetMove = channel.unary_unary(
                '/simpleRCRS.SimpleConnection/SetMove',
                request_serializer=RCRS__pb2.Check.SerializeToString,
                response_deserializer=RCRS__pb2.Move.FromString,
                )
        self.RunTimestep = channel.unary_unary(
                '/simpleRCRS.SimpleConnection/RunTimestep',
                request_serializer=RCRS__pb2.WorldInfoProto.SerializeToString,
                response_deserializer=RCRS__pb2.ActionType.FromString,
                )
        self.AskBusy = channel.unary_unary(
                '/simpleRCRS.SimpleConnection/AskBusy',
                request_serializer=RCRS__pb2.BusyProto.SerializeToString,
                response_deserializer=RCRS__pb2.Check.FromString,
                )


class SimpleConnectionServicer(object):
    """Missing associated documentation comment in .proto file"""

    def SetActionType(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMove(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunTimestep(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AskBusy(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SimpleConnectionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetActionType': grpc.unary_unary_rpc_method_handler(
                    servicer.SetActionType,
                    request_deserializer=RCRS__pb2.AgentProto.FromString,
                    response_serializer=RCRS__pb2.ActionType.SerializeToString,
            ),
            'SetMove': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMove,
                    request_deserializer=RCRS__pb2.Check.FromString,
                    response_serializer=RCRS__pb2.Move.SerializeToString,
            ),
            'RunTimestep': grpc.unary_unary_rpc_method_handler(
                    servicer.RunTimestep,
                    request_deserializer=RCRS__pb2.WorldInfoProto.FromString,
                    response_serializer=RCRS__pb2.ActionType.SerializeToString,
            ),
            'AskBusy': grpc.unary_unary_rpc_method_handler(
                    servicer.AskBusy,
                    request_deserializer=RCRS__pb2.BusyProto.FromString,
                    response_serializer=RCRS__pb2.Check.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'simpleRCRS.SimpleConnection', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SimpleConnection(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def SetActionType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/simpleRCRS.SimpleConnection/SetActionType',
            RCRS__pb2.AgentProto.SerializeToString,
            RCRS__pb2.ActionType.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetMove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/simpleRCRS.SimpleConnection/SetMove',
            RCRS__pb2.Check.SerializeToString,
            RCRS__pb2.Move.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunTimestep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/simpleRCRS.SimpleConnection/RunTimestep',
            RCRS__pb2.WorldInfoProto.SerializeToString,
            RCRS__pb2.ActionType.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AskBusy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/simpleRCRS.SimpleConnection/AskBusy',
            RCRS__pb2.BusyProto.SerializeToString,
            RCRS__pb2.Check.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
